# urls.py
from django.urls import path
from . import views

urlpatterns = [
    # ... your other URLs
    path('view-cart/', views.view_cart, name='view_cart'),
]

# views.py (Enhanced version)
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
from .models import Cart

@require_http_methods(["GET"])
def view_cart(request):
    """
    View cart contents for both authenticated and anonymous users
    """
    try:
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user).first()
        else:
            # Ensure session exists
            if not request.session.session_key:
                request.session.create()
            session_key = request.session.session_key
            cart = Cart.objects.filter(session_key=session_key, user=None).first()
        
        if not cart:
            return JsonResponse({
                'success': False, 
                'message': 'Cart is empty',
                'items': [],
                'total': '0.00',
                'itemCount': 0
            })
        
        # Get cart items
        cart_items = cart.get_items()
        
        if not cart_items:
            return JsonResponse({
                'success': False, 
                'message': 'Cart is empty',
                'items': [],
                'total': '0.00',
                'itemCount': 0
            })
        
        items = []
        for item in cart_items:
            items.append({
                'product_id': item.product.id,
                'name': item.product.name,
                'price': f"{item.product.price:.2f}",
                'quantity': item.quantity,
                'total': f"{item.total_price():.2f}",
                # Optional: Add more product details
                'image_url': item.product.image.url if hasattr(item.product, 'image') and item.product.image else None,
                'description': item.product.description if hasattr(item.product, 'description') else None,
            })
        
        return JsonResponse({
            'success': True,
            'items': items,
            'total': f"{cart.total_price():.2f}",
            'itemCount': cart.item_count()
        })
        
    except Exception as e:
        # Log the error in production
        print(f"Error in view_cart: {str(e)}")
        return JsonResponse({
            'success': False,
            'message': 'An error occurred while loading your cart',
            'items': [],
            'total': '0.00',
            'itemCount': 0
        })

# Optional: Add a view to update cart quantities from the modal
@require_http_methods(["POST"])
def update_cart_item(request):
    """
    Update cart item quantity via AJAX
    """
    if request.content_type == 'application/json':
        import json
        data = json.loads(request.body)
        product_id = data.get('product_id')
        quantity = data.get('quantity', 1)
    else:
        product_id = request.POST.get('product_id')
        quantity = int(request.POST.get('quantity', 1))
    
    try:
        if request.user.is_authenticated:
            cart = Cart.objects.filter(user=request.user).first()
        else:
            if not request.session.session_key:
                request.session.create()
            session_key = request.session.session_key
            cart = Cart.objects.filter(session_key=session_key, user=None).first()
        
        if not cart:
            return JsonResponse({'success': False, 'message': 'Cart not found'})
        
        # Update the cart item
        cart_item = cart.cartitem_set.filter(product_id=product_id).first()
        if cart_item:
            if quantity > 0:
                cart_item.quantity = quantity
                cart_item.save()
                return JsonResponse({
                    'success': True, 
                    'message': 'Cart updated successfully',
                    'new_total': f"{cart.total_price():.2f}",
                    'item_total': f"{cart_item.total_price():.2f}"
                })
            else:
                cart_item.delete()
                return JsonResponse({
                    'success': True, 
                    'message': 'Item removed from cart',
                    'new_total': f"{cart.total_price():.2f}"
                })
        else:
            return JsonResponse({'success': False, 'message': 'Item not found in cart'})
            
    except Exception as e:
        return JsonResponse({'success': False, 'message': 'An error occurred'})

# models.py (Assuming you have these methods, if not, here they are)
class Cart(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, null=True, blank=True)
    session_key = models.CharField(max_length=32, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def get_items(self):
        return self.cartitem_set.all()
    
    def total_price(self):
        return sum(item.total_price() for item in self.get_items())
    
    def item_count(self):
        return sum(item.quantity for item in self.get_items())

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey('Product', on_delete=models.CASCADE)  # Replace 'Product' with your actual Product model
    quantity = models.PositiveIntegerField(default=1)
    added_at = models.DateTimeField(auto_now_add=True)
    
    def total_price(self):
        return self.product.price * self.quantity